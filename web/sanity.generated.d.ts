/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Notification = {
  _id: string;
  _type: 'notification';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  message?: string;
  status?: 'success' | 'warning' | 'error';
  source?: string;
  metadata?: {
    documentId?: string;
    action?: string;
    userId?: string;
  };
  isRead?: boolean;
  expiresAt?: string;
  createdAt?: string;
};

export type Post = {
  _id: string;
  _type: 'post';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  notifications?: string;
  title?: string;
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        products?: Array<{
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          _key: string;
          [internalGroqTypeReferenceTo]?: 'product';
        }>;
        _type: 'products';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
  >;
  status?: 'inprogress' | 'ready-for-review' | 'ready' | 'sent';
  marketingCampaign?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'marketingCampaign';
  };
  klaviyoListId?: string;
};

export type MarketingCampaign = {
  _id: string;
  _type: 'marketingCampaign';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  post?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'post';
  };
  status?: 'draft' | 'ready' | 'sent';
  klaviyoTemplateId?: string;
  klaviyoCampaignId?: string;
  updatedAt?: string;
  createdAt?: string;
  description?: string;
};

export type PortableTextSimple = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: 'span';
    _key: string;
  }>;
  style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
  listItem?: 'bullet' | 'number';
  markDefs?: Array<
    | ({
        _key: string;
      } & LinkProduct)
    | ({
        _key: string;
      } & LinkEmail)
    | ({
        _key: string;
      } & LinkInternal)
    | ({
        _key: string;
      } & LinkExternal)
  >;
  level?: number;
  _type: 'block';
  _key: string;
}>;

export type PortableText = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<
        | ({
            _key: string;
          } & LinkProduct)
        | ({
            _key: string;
          } & LinkEmail)
        | ({
            _key: string;
          } & LinkInternal)
        | ({
            _key: string;
          } & LinkExternal)
      >;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | ({
      _key: string;
    } & Accordion)
  | ({
      _key: string;
    } & Callout)
  | ({
      _key: string;
    } & Grid)
  | ({
      _key: string;
    } & Images)
  | ({
      _key: string;
    } & ImageWithProductHotspots)
  | ({
      _key: string;
    } & Instagram)
  | ({
      _key: string;
    } & Products)
>;

export type Settings = {
  _id: string;
  _type: 'settings';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  homePage?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'home';
  };
  siteLogo?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  menu?: Menu;
  footer?: FooterSettings;
  customProductOptions?: Array<
    | ({
        _key: string;
      } & CustomProductOptionColor)
    | ({
        _key: string;
      } & CustomProductOptionSize)
  >;
  notFoundPage?: NotFoundPage;
  seo?: Seo;
};

export type Spot = {
  _type: 'spot';
  productWithVariant?: ProductWithVariant;
  x?: number;
  y?: number;
};

export type ProxyString = string;

export type ProductVariant = {
  _id: string;
  _type: 'productVariant';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hidden?: string;
  titleProxy?: ProxyString;
  store?: ShopifyProductVariant;
};

export type ShopifyProductVariant = {
  _type: 'shopifyProductVariant';
  createdAt?: string;
  updatedAt?: string;
  status?: 'active' | 'archived' | 'draft';
  isDeleted?: boolean;
  title?: string;
  sku?: string;
  id?: number;
  gid?: string;
  productId?: number;
  productGid?: string;
  price?: number;
  compareAtPrice?: number;
  inventory?: Inventory;
  option1?: string;
  option2?: string;
  option3?: string;
  previewImageUrl?: string;
};

export type ProductReference = {
  _type: 'productReference';
  productWithVariant?: ProductWithVariant;
};

export type ProductHotspots = Array<
  {
    _key: string;
  } & Spot
>;

export type Products = {
  _type: 'products';
  products?: Array<
    {
      _key: string;
    } & ProductReference
  >;
  layout?: 'card' | 'pill';
};

export type PriceRange = {
  _type: 'priceRange';
  minVariantPrice?: number;
  maxVariantPrice?: number;
};

export type PlaceholderString = string;

export type Option = {
  _type: 'option';
  name?: string;
  values?: Array<string>;
};

export type NotFoundPage = {
  _type: 'notFoundPage';
  title?: string;
  body?: string;
  collection?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'collection';
  };
  colorTheme?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'colorTheme';
  };
};

export type Menu = {
  _type: 'menu';
  links?: Array<
    | ({
        _key: string;
      } & CollectionGroup)
    | ({
        _key: string;
      } & LinkInternal)
    | ({
        _key: string;
      } & LinkExternal)
  >;
};

export type MenuLinks = Array<
  | ({
      _key: string;
    } & CollectionGroup)
  | ({
      _key: string;
    } & LinkInternal)
  | ({
      _key: string;
    } & LinkExternal)
>;

export type Inventory = {
  _type: 'inventory';
  isAvailable?: boolean;
  management?: string;
  policy?: string;
};

export type Instagram = {
  _type: 'instagram';
  url?: string;
};

export type ImageWithProductHotspots = {
  _type: 'imageWithProductHotspots';
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  showHotspots?: boolean;
  productHotspots?: ProductHotspots;
};

export type ImageFeature = {
  _type: 'imageFeature';
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  variant?:
    | string
    | 'caption'
    | 'callToAction'
    | 'productHotspots'
    | 'productTags';
  caption?: string;
  callToAction?: ImageCallToAction;
  productHotspots?: ProductHotspots;
  productTags?: Array<
    {
      _key: string;
    } & ProductWithVariant
  >;
};

export type Images = {
  _type: 'images';
  imageFeatures?: Array<
    {
      _key: string;
    } & ImageFeature
  >;
  fullWidth?: boolean;
  verticalAlign?: 'top' | 'center' | 'bottom';
};

export type ImageCallToAction = {
  _type: 'imageCallToAction';
  title?: string;
  link?: Array<
    | ({
        _key: string;
      } & LinkInternal)
    | ({
        _key: string;
      } & LinkExternal)
  >;
};

export type Grid = {
  _type: 'grid';
  items?: Array<
    | ({
        _key: string;
      } & GridItem)
    | ({
        _key: string;
      } & ProductReference)
  >;
};

export type GridItem = {
  _type: 'gridItem';
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  body?: PortableTextSimple;
  colorTheme?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'colorTheme';
  };
};

export type FooterSettings = {
  _type: 'footerSettings';
  links?: Array<
    | ({
        _key: string;
      } & LinkInternal)
    | ({
        _key: string;
      } & LinkExternal)
  >;
  text?: PortableTextSimple;
};

export type Careers = {
  _type: 'careers';
  subtitle?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  cta?: {
    label?: string;
    url?: string;
  };
};

export type Faqs = {
  _type: 'faqs';
  subtitle?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  questions?: Array<{
    question?: string;
    answer?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }>;
    _key: string;
  }>;
};

export type Collaborators = {
  _type: 'collaborators';
  subtitle?: string;
  items?: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'image';
    };
    name?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }>;
    url?: string;
    _key: string;
  }>;
};

export type TechInformation = {
  _type: 'techInformation';
  subtitle?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  infoBlocks?: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'image';
    };
    content?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }>;
    _key: string;
  }>;
};

export type LogoGrid = {
  _type: 'logoGrid';
  title?: string;
  items?: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'image';
    };
    title?: string;
    url?: string;
    _key: string;
  }>;
};

export type InformationHero = {
  _type: 'informationHero';
  subtitle?: string;
  header?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type CustomProductOptionSize = {
  _type: 'customProductOption.size';
  title?: string;
  sizes?: Array<
    {
      _key: string;
    } & CustomProductOptionSizeObject
  >;
};

export type CustomProductOptionSizeObject = {
  _type: 'customProductOption.sizeObject';
  title?: string;
  width?: number;
  height?: number;
};

export type CustomProductOptionColor = {
  _type: 'customProductOption.color';
  title?: string;
  colors?: Array<
    {
      _key: string;
    } & CustomProductOptionColorObject
  >;
};

export type CustomProductOptionColorObject = {
  _type: 'customProductOption.colorObject';
  title?: string;
  color?: Color;
};

export type CollectionRule = {
  _type: 'collectionRule';
  column?: string;
  relation?: string;
  condition?: string;
};

export type CollectionReference = {
  _type: 'collectionReference';
  collection?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'collection';
  };
  showBackground?: boolean;
};

export type CollectionLinks = Array<{
  _ref: string;
  _type: 'reference';
  _weak?: boolean;
  _key: string;
  [internalGroqTypeReferenceTo]?: 'collection';
}>;

export type CollectionGroup = {
  _type: 'collectionGroup';
  title?: string;
  collectionLinks?: CollectionLinks;
  collectionProducts?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'collection';
  };
};

export type CallToAction = {
  _type: 'callToAction';
  layout?: 'left' | 'right';
  title?: string;
  portableText?: string;
  link?: Array<
    | ({
        _key: string;
      } & LinkInternal)
    | ({
        _key: string;
      } & LinkExternal)
  >;
  content?: Array<
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
    | ({
        _key: string;
      } & ProductWithVariant)
  >;
};

export type Callout = {
  _type: 'callout';
  text?: string;
  link?: Array<
    | ({
        _key: string;
      } & LinkInternal)
    | ({
        _key: string;
      } & LinkExternal)
  >;
};

export type Accordion = {
  _type: 'accordion';
  groups?: Array<
    {
      _key: string;
    } & AccordionGroup
  >;
};

export type AccordionGroup = {
  _type: 'accordionGroup';
  title?: string;
  body?: PortableTextSimple;
};

export type LinkProduct = {
  _type: 'linkProduct';
  productWithVariant?: ProductWithVariant;
  linkAction?: 'link' | 'addToCart' | 'buyNow';
  quantity?: number;
};

export type ProductWithVariant = {
  _type: 'productWithVariant';
  product?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'product';
  };
  variant?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'productVariant';
  };
  colorTheme?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'colorTheme';
  };
};

export type LinkInternal = {
  _type: 'linkInternal';
  reference?:
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'collection';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'home';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'page';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'product';
      };
};

export type Product = {
  _id: string;
  _type: 'product';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hidden?: string;
  titleProxy?: ProxyString;
  slugProxy?: ProxyString;
  slug?: string;
  colorTheme?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'colorTheme';
  };
  colorVariant?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'colorVariant';
  };
  productMap?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'productMap';
  };
  images?: Array<{
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
    _key: string;
  }>;
  body?: PortableText;
  category?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'category';
  };
  store?: ShopifyProduct;
  hideFromSearch?: boolean;
  seo?: Seo;
};

export type ShopifyProduct = {
  _type: 'shopifyProduct';
  createdAt?: string;
  updatedAt?: string;
  status?: 'active' | 'archived' | 'draft';
  isDeleted?: boolean;
  title?: string;
  id?: number;
  gid?: string;
  slug?: Slug;
  descriptionHtml?: string;
  productType?: string;
  vendor?: string;
  tags?: string;
  priceRange?: PriceRange;
  previewImageUrl?: string;
  options?: Array<
    {
      _key: string;
    } & Option
  >;
  variants?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'productVariant';
  }>;
};

export type Category = {
  _id: string;
  _type: 'category';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
};

export type ProductMap = {
  _id: string;
  _type: 'productMap';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  products?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'product';
  }>;
  description?: string;
  careInstructions?: Array<string>;
};

export type ColorVariant = {
  _id: string;
  _type: 'colorVariant';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  colorName?: string;
  colorValue?: Color;
  pattern?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type Page = {
  _id: string;
  _type: 'page';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  publishedAt?: string;
  colorTheme?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'colorTheme';
  };
  hero?: Hero;
  modules?: Array<
    | ({
        _key: string;
      } & InformationHero)
    | ({
        _key: string;
      } & LogoGrid)
    | ({
        _key: string;
      } & TechInformation)
    | ({
        _key: string;
      } & Collaborators)
    | ({
        _key: string;
      } & Faqs)
    | ({
        _key: string;
      } & Careers)
  >;
  seo?: Seo;
};

export type Home = {
  _id: string;
  _type: 'home';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  colorTheme?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'colorTheme';
  };
  modules?: Array<
    | ({
        _key: string;
      } & Accordion)
    | ({
        _key: string;
      } & Callout)
    | ({
        _key: string;
      } & Grid)
    | ({
        _key: string;
      } & Images)
    | ({
        _key: string;
      } & ImageWithProductHotspots)
    | ({
        _key: string;
      } & Instagram)
    | ({
        _key: string;
      } & Products)
  >;
  seo?: Seo;
};

export type Collection = {
  _id: string;
  _type: 'collection';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hidden?: string;
  titleProxy?: ProxyString;
  slugProxy?: ProxyString;
  colorTheme?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'colorTheme';
  };
  vector?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  showHero?: boolean;
  hero?: Hero;
  modules?: Array<
    | ({
        _key: string;
      } & Callout)
    | ({
        _key: string;
      } & CallToAction)
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
    | ({
        _key: string;
      } & Instagram)
  >;
  store?: ShopifyCollection;
  seo?: Seo;
};

export type Seo = {
  _type: 'seo';
  title?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type ShopifyCollection = {
  _type: 'shopifyCollection';
  createdAt?: string;
  updatedAt?: string;
  isDeleted?: boolean;
  title?: string;
  id?: number;
  gid?: string;
  slug?: Slug;
  descriptionHtml?: string;
  imageUrl?: string;
  rules?: Array<
    {
      _key: string;
    } & CollectionRule
  >;
  disjunctive?: boolean;
  sortOrder?: string;
};

export type Hero = {
  _type: 'hero';
  title?: string;
  description?: string;
  link?: Array<
    | ({
        _key: string;
      } & LinkInternal)
    | ({
        _key: string;
      } & LinkExternal)
  >;
  content?: Array<
    | ({
        _key: string;
      } & ProductWithVariant)
    | ({
        _key: string;
      } & ImageWithProductHotspots)
  >;
};

export type ColorTheme = {
  _id: string;
  _type: 'colorTheme';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  text?: Color;
  background?: Color;
};

export type LinkExternal = {
  _type: 'linkExternal';
  url?: string;
  newWindow?: boolean;
};

export type LinkEmail = {
  _type: 'linkEmail';
  email?: string;
};

export type SanityAssistInstructionTask = {
  _type: 'sanity.assist.instructionTask';
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: 'sanity.assist.task.status';
  tasks?: Array<
    {
      _key: string;
    } & SanityAssistInstructionTask
  >;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: 'sanity.assist.schemaType.annotations';
  title?: string;
  fields?: Array<
    {
      _key: string;
    } & SanityAssistSchemaTypeField
  >;
};

export type SanityAssistOutputType = {
  _type: 'sanity.assist.output.type';
  type?: string;
};

export type SanityAssistOutputField = {
  _type: 'sanity.assist.output.field';
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: 'sanity.assist.instruction.context';
  reference?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'assist.instruction.context';
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: 'assist.instruction.context';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: 'sanity.assist.instruction.userInput';
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<
    | {
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }
    | ({
        _key: string;
      } & SanityAssistInstructionFieldRef)
    | ({
        _key: string;
      } & SanityAssistInstructionContext)
    | ({
        _key: string;
      } & SanityAssistInstructionUserInput)
  >;
  style?: 'normal';
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: 'block';
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: 'sanity.assist.instruction.fieldRef';
  path?: string;
};

export type SanityAssistInstruction = {
  _type: 'sanity.assist.instruction';
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<
    | ({
        _key: string;
      } & SanityAssistOutputField)
    | ({
        _key: string;
      } & SanityAssistOutputType)
  >;
};

export type SanityAssistSchemaTypeField = {
  _type: 'sanity.assist.schemaType.field';
  path?: string;
  instructions?: Array<
    {
      _key: string;
    } & SanityAssistInstruction
  >;
};

export type MediaTag = {
  _id: string;
  _type: 'media.tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Color = {
  _type: 'color';
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: 'rgbaColor';
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: 'hsvaColor';
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: 'hslaColor';
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | Notification
  | Post
  | MarketingCampaign
  | PortableTextSimple
  | PortableText
  | Settings
  | Spot
  | ProxyString
  | ProductVariant
  | ShopifyProductVariant
  | ProductReference
  | ProductHotspots
  | Products
  | PriceRange
  | PlaceholderString
  | Option
  | NotFoundPage
  | Menu
  | MenuLinks
  | Inventory
  | Instagram
  | ImageWithProductHotspots
  | ImageFeature
  | Images
  | ImageCallToAction
  | Grid
  | GridItem
  | FooterSettings
  | Careers
  | Faqs
  | Collaborators
  | TechInformation
  | LogoGrid
  | InformationHero
  | CustomProductOptionSize
  | CustomProductOptionSizeObject
  | CustomProductOptionColor
  | CustomProductOptionColorObject
  | CollectionRule
  | CollectionReference
  | CollectionLinks
  | CollectionGroup
  | CallToAction
  | Callout
  | Accordion
  | AccordionGroup
  | LinkProduct
  | ProductWithVariant
  | LinkInternal
  | Product
  | ShopifyProduct
  | Category
  | ProductMap
  | ColorVariant
  | Page
  | Home
  | Collection
  | Seo
  | ShopifyCollection
  | Hero
  | ColorTheme
  | LinkExternal
  | LinkEmail
  | SanityAssistInstructionTask
  | SanityAssistTaskStatus
  | SanityAssistSchemaTypeAnnotations
  | SanityAssistOutputType
  | SanityAssistOutputField
  | SanityAssistInstructionContext
  | AssistInstructionContext
  | SanityAssistInstructionUserInput
  | SanityAssistInstructionPrompt
  | SanityAssistInstructionFieldRef
  | SanityAssistInstruction
  | SanityAssistSchemaTypeField
  | MediaTag
  | Color
  | RgbaColor
  | HsvaColor
  | HslaColor
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: app/groq/queries.ts
// Variable: NESTED_HOME_PRODUCTS_QUERY
// Query: *[_type == "settings"][0].homePage-> {    'products': coalesce(modules[] {    (_type == 'grid') => {      'product': coalesce(items[] {        (_type == 'productReference') => {        'productId': productWithVariant.product->store.gid        }      }, [])[defined(productId)]    }  })}
export type NESTED_HOME_PRODUCTS_QUERYResult = {
  products: Array<
    | {}
    | {
        product:
          | Array<never>
          | Array<{
              productId: string | null;
            }>;
      }
  > | null;
} | null;
// Variable: HOME_PAGE_QUERY
// Query: *[_type == "settings"][0].homePage-> {    modules[] {      _type,      _key,      ...,      (_type == 'grid') => {        items[] {          _type,          _key,          ...,            (_type == 'productReference') => {         productWithVariant {      ...,      product-> {        ...,        category-> {          _key,          title,          slug,        }      },      'backgroundColor': colorTheme->background.hex,    }  },          (_type == 'gridItem') => {            ...          }        }      }    } }
export type HOME_PAGE_QUERYResult = {
  modules: Array<
    | {
        _type: 'accordion';
        _key: string;
        groups?: Array<
          {
            _key: string;
          } & AccordionGroup
        >;
      }
    | {
        _type: 'callout';
        _key: string;
        text?: string;
        link?: Array<
          | ({
              _key: string;
            } & LinkExternal)
          | ({
              _key: string;
            } & LinkInternal)
        >;
      }
    | {
        _type: 'grid';
        _key: string;
        items: Array<
          | {
              _type: 'gridItem';
              _key: string;
              image?: {
                asset?: {
                  _ref: string;
                  _type: 'reference';
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
                };
                media?: unknown;
                hotspot?: SanityImageHotspot;
                crop?: SanityImageCrop;
                _type: 'image';
              };
              body?: PortableTextSimple;
              colorTheme?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'colorTheme';
              };
            }
          | {
              _type: 'productReference';
              _key: string;
              productWithVariant: {
                _type: 'productWithVariant';
                product: {
                  _id: string;
                  _type: 'product';
                  _createdAt: string;
                  _updatedAt: string;
                  _rev: string;
                  hidden?: string;
                  titleProxy?: ProxyString;
                  slugProxy?: ProxyString;
                  slug?: string;
                  colorTheme?: {
                    _ref: string;
                    _type: 'reference';
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: 'colorTheme';
                  };
                  colorVariant?: {
                    _ref: string;
                    _type: 'reference';
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: 'colorVariant';
                  };
                  productMap?: {
                    _ref: string;
                    _type: 'reference';
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: 'productMap';
                  };
                  images?: Array<{
                    asset?: {
                      _ref: string;
                      _type: 'reference';
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
                    };
                    media?: unknown;
                    hotspot?: SanityImageHotspot;
                    crop?: SanityImageCrop;
                    alt?: string;
                    _type: 'image';
                    _key: string;
                  }>;
                  body?: PortableText;
                  category: {
                    _key: null;
                    title: string | null;
                    slug: Slug | null;
                  } | null;
                  store?: ShopifyProduct;
                  hideFromSearch?: boolean;
                  seo?: Seo;
                } | null;
                variant?: {
                  _ref: string;
                  _type: 'reference';
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: 'productVariant';
                };
                colorTheme?: {
                  _ref: string;
                  _type: 'reference';
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: 'colorTheme';
                };
                backgroundColor: string | null;
              } | null;
            }
        > | null;
      }
    | {
        _type: 'images';
        _key: string;
        imageFeatures?: Array<
          {
            _key: string;
          } & ImageFeature
        >;
        fullWidth?: boolean;
        verticalAlign?: 'bottom' | 'center' | 'top';
      }
    | {
        _type: 'imageWithProductHotspots';
        _key: string;
        image?: {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
        };
        showHotspots?: boolean;
        productHotspots?: ProductHotspots;
      }
    | {
        _type: 'instagram';
        _key: string;
        url?: string;
      }
    | {
        _type: 'products';
        _key: string;
        products?: Array<
          {
            _key: string;
          } & ProductReference
        >;
        layout?: 'card' | 'pill';
      }
  > | null;
} | null;
// Variable: PAGE_QUERY
// Query: *[_type in ["page"] && slug.current == $handle][0] {  title,  _type,  'slug': slug.current,  svgSupport {    asset-> {      shopifyUrl,      metadata    }  },  'seo': seo {    title,    description,    image {      asset-> {        shopifyUrl,        metadata      }    }  },  modules[] {    _type,    _key,      (_type == 'collaborators') => {    subtitle,    items[] {      _type,      _key,      image {        asset-> {          ...,        }      },      name,      description,      url,    }  },      (_type == 'informationHero') => {    subtitle,    header,    content,  },      (_type == 'techInformation') => {       subtitle,    description,    infoBlocks[] {      _key,      content,      image {        asset-> {          ...,        }      },    },  },      (_type == 'logoGrid') => {    title,    items[] {      _key,      image {        asset-> {          ...,        }      },      url,      title,    }  },      (_type == 'faqs') => {    subtitle,    description,    questions[] {      _key,      question,      answer,    }  },      (_type == 'careers') => {    subtitle,    body,    cta,  },  }}
export type PAGE_QUERYResult = {
  title: string | null;
  _type: 'page';
  slug: string | null;
  svgSupport: null;
  seo: {
    title: string | null;
    description: string | null;
    image: {
      asset: {
        shopifyUrl: null;
        metadata: SanityImageMetadata | null;
      } | null;
    } | null;
  } | null;
  modules: Array<
    | {
        _type: 'careers';
        _key: string;
        subtitle: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: 'span';
            _key: string;
          }>;
          style?:
            | 'blockquote'
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'h6'
            | 'normal';
          listItem?: 'bullet' | 'number';
          markDefs?: Array<{
            href?: string;
            _type: 'link';
            _key: string;
          }>;
          level?: number;
          _type: 'block';
          _key: string;
        }> | null;
        cta: {
          label?: string;
          url?: string;
        } | null;
      }
    | {
        _type: 'collaborators';
        _key: string;
        subtitle: string | null;
        items: Array<{
          _type: null;
          _key: string;
          image: {
            asset: {
              _id: string;
              _type: 'sanity.imageAsset';
              _createdAt: string;
              _updatedAt: string;
              _rev: string;
              originalFilename?: string;
              label?: string;
              title?: string;
              description?: string;
              altText?: string;
              sha1hash?: string;
              extension?: string;
              mimeType?: string;
              size?: number;
              assetId?: string;
              uploadId?: string;
              path?: string;
              url?: string;
              metadata?: SanityImageMetadata;
              source?: SanityAssetSourceData;
            } | null;
          } | null;
          name: string | null;
          description: Array<{
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: 'span';
              _key: string;
            }>;
            style?:
              | 'blockquote'
              | 'h1'
              | 'h2'
              | 'h3'
              | 'h4'
              | 'h5'
              | 'h6'
              | 'normal';
            listItem?: 'bullet' | 'number';
            markDefs?: Array<{
              href?: string;
              _type: 'link';
              _key: string;
            }>;
            level?: number;
            _type: 'block';
            _key: string;
          }> | null;
          url: string | null;
        }> | null;
      }
    | {
        _type: 'faqs';
        _key: string;
        subtitle: string | null;
        description: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: 'span';
            _key: string;
          }>;
          style?:
            | 'blockquote'
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'h6'
            | 'normal';
          listItem?: 'bullet' | 'number';
          markDefs?: Array<{
            href?: string;
            _type: 'link';
            _key: string;
          }>;
          level?: number;
          _type: 'block';
          _key: string;
        }> | null;
        questions: Array<{
          _key: string;
          question: string | null;
          answer: Array<{
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: 'span';
              _key: string;
            }>;
            style?:
              | 'blockquote'
              | 'h1'
              | 'h2'
              | 'h3'
              | 'h4'
              | 'h5'
              | 'h6'
              | 'normal';
            listItem?: 'bullet' | 'number';
            markDefs?: Array<{
              href?: string;
              _type: 'link';
              _key: string;
            }>;
            level?: number;
            _type: 'block';
            _key: string;
          }> | null;
        }> | null;
      }
    | {
        _type: 'informationHero';
        _key: string;
        subtitle: string | null;
        header: string | null;
        content: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: 'span';
            _key: string;
          }>;
          style?:
            | 'blockquote'
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'h6'
            | 'normal';
          listItem?: 'bullet' | 'number';
          markDefs?: Array<{
            href?: string;
            _type: 'link';
            _key: string;
          }>;
          level?: number;
          _type: 'block';
          _key: string;
        }> | null;
      }
    | {
        _type: 'logoGrid';
        _key: string;
        title: string | null;
        items: Array<{
          _key: string;
          image: {
            asset: {
              _id: string;
              _type: 'sanity.imageAsset';
              _createdAt: string;
              _updatedAt: string;
              _rev: string;
              originalFilename?: string;
              label?: string;
              title?: string;
              description?: string;
              altText?: string;
              sha1hash?: string;
              extension?: string;
              mimeType?: string;
              size?: number;
              assetId?: string;
              uploadId?: string;
              path?: string;
              url?: string;
              metadata?: SanityImageMetadata;
              source?: SanityAssetSourceData;
            } | null;
          } | null;
          url: string | null;
          title: string | null;
        }> | null;
      }
    | {
        _type: 'techInformation';
        _key: string;
        subtitle: string | null;
        description: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: 'span';
            _key: string;
          }>;
          style?:
            | 'blockquote'
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'h6'
            | 'normal';
          listItem?: 'bullet' | 'number';
          markDefs?: Array<{
            href?: string;
            _type: 'link';
            _key: string;
          }>;
          level?: number;
          _type: 'block';
          _key: string;
        }> | null;
        infoBlocks: Array<{
          _key: string;
          content: Array<{
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: 'span';
              _key: string;
            }>;
            style?:
              | 'blockquote'
              | 'h1'
              | 'h2'
              | 'h3'
              | 'h4'
              | 'h5'
              | 'h6'
              | 'normal';
            listItem?: 'bullet' | 'number';
            markDefs?: Array<{
              href?: string;
              _type: 'link';
              _key: string;
            }>;
            level?: number;
            _type: 'block';
            _key: string;
          }> | null;
          image: {
            asset: {
              _id: string;
              _type: 'sanity.imageAsset';
              _createdAt: string;
              _updatedAt: string;
              _rev: string;
              originalFilename?: string;
              label?: string;
              title?: string;
              description?: string;
              altText?: string;
              sha1hash?: string;
              extension?: string;
              mimeType?: string;
              size?: number;
              assetId?: string;
              uploadId?: string;
              path?: string;
              url?: string;
              metadata?: SanityImageMetadata;
              source?: SanityAssetSourceData;
            } | null;
          } | null;
        }> | null;
      }
  > | null;
} | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    "*[_type == \"settings\"][0].homePage-> {\n  \n  'products': coalesce(modules[] {\n    (_type == 'grid') => {\n      'product': coalesce(items[] {\n        (_type == 'productReference') => {\n        'productId': productWithVariant.product->store.gid\n        }\n      }, [])[defined(productId)]\n    }\n  })\n\n}": NESTED_HOME_PRODUCTS_QUERYResult;
    "*[_type == \"settings\"][0].homePage-> {\n    modules[] {\n      _type,\n      _key,\n      ...,\n      (_type == 'grid') => {\n        items[] {\n          _type,\n          _key,\n          ...,\n          \n  (_type == 'productReference') => {     \n    productWithVariant {\n      ...,\n      product-> {\n        ...,\n        category-> {\n          _key,\n          title,\n          slug,\n        }\n      },\n      'backgroundColor': colorTheme->background.hex,\n    }\n  }\n,\n          (_type == 'gridItem') => {\n            ...\n          }\n        }\n      }\n    } \n}": HOME_PAGE_QUERYResult;
    "*[_type in [\"page\"] && slug.current == $handle][0] {\n  title,\n  _type,\n  'slug': slug.current,\n  svgSupport {\n    asset-> {\n      shopifyUrl,\n      metadata\n    }\n  },\n  'seo': seo {\n    title,\n    description,\n    image {\n      asset-> {\n        shopifyUrl,\n        metadata\n      }\n    }\n  },\n  modules[] {\n    _type,\n    _key,\n    \n  (_type == 'collaborators') => {\n    subtitle,\n    items[] {\n      _type,\n      _key,\n      image {\n        asset-> {\n          ...,\n        }\n      },\n      name,\n      description,\n      url,\n    }\n  }\n,\n    \n  (_type == 'informationHero') => {\n    subtitle,\n    header,\n    content,\n  }\n,\n    \n\n  (_type == 'techInformation') => {\n       subtitle,\n    description,\n    infoBlocks[] {\n      _key,\n      content,\n      image {\n        asset-> {\n          ...,\n        }\n      },\n    },\n  }\n,\n    \n  (_type == 'logoGrid') => {\n    title,\n    items[] {\n      _key,\n      image {\n        asset-> {\n          ...,\n        }\n      },\n      url,\n      title,\n    }\n  }\n,\n    \n  (_type == 'faqs') => {\n    subtitle,\n    description,\n    questions[] {\n      _key,\n      question,\n      answer,\n    }\n  }\n,\n    \n  (_type == 'careers') => {\n    subtitle,\n    body,\n    cta,\n  }\n,\n  }\n}": PAGE_QUERYResult;
  }
}
